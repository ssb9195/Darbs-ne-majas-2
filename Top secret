import json

# ===============================
# Klase, kas raksturo grāmatu
# ===============================
class Gramata:
    def __init__(self, nosaukums, autors, gads):
        self.nosaukums = nosaukums
        self.autors = autors
        self.gads = gads

    def __str__(self):
        return f"'{self.nosaukums}' - {self.autors} ({self.gads})"


# ===============================
# Klase, kas pārvalda bibliotēku
# ===============================
class Biblioteka:
    def __init__(self):
        self.gramatas = []

    # Pievieno jaunu grāmatu
    def pievienot_gramatu(self, gramata):
        self.gramatas.append(gramata)
        print(f"Grāmata '{gramata.nosaukums}' pievienota katalogam.")

    # Parāda visas grāmatas
    def paradit_gramatas(self):
        if not self.gramatas:
            print("Bibliotēka ir tukša.")
        else:
            print("\n=== Bibliotēkas katalogs ===")
            for i, g in enumerate(self.gramatas, 1):
                print(f"{i}. {g}")

    # Meklē grāmatas pēc nosaukuma vai autora
    def mekle_gramatu(self, atsl):
        atrastas = [g for g in self.gramatas if atsl.lower() in g.nosaukums.lower() or atsl.lower() in g.autors.lower()]
        if atrastas:
            print("\nAtrastās grāmatas:")
            for g in atrastas:
                print(g)
        else:
            print("Grāmatas nav atrastas.")

    # Kārto grāmatas pēc gada
    def kartot_pec_gada(self):
        self.gramatas.sort(key=lambda g: g.gads)
        print("Grāmatas sakārtotas pēc izdošanas gada.")

    # Dzēš grāmatu pēc nosaukuma
    def dzest_gramatu(self, nosaukums):
        for g in self.gramatas:
            if g.nosaukums.lower() == nosaukums.lower():
                self.gramatas.remove(g)
                print(f"Grāmata '{nosaukums}' dzēsta.")
                return
        print("Šāda grāmata nav atrasta.")

    # Statistika – vidējais izdošanas gads
    def statistika(self):
        if not self.gramatas:
            print("Nav datu statistikai.")
            return
        vid_gads = sum(g.gads for g in self.gramatas) / len(self.gramatas)
        jaunaka = max(self.gramatas, key=lambda g: g.gads)
        vecaka = min(self.gramatas, key=lambda g: g.gads)
        print("\nStatistika:")
        print(f"   Vidējais izdošanas gads: {vid_gads:.1f}")
        print(f"   Vecākā grāmata: {vecaka}")
        print(f"   Jaunākā grāmata: {jaunaka}")

    # Saglabā datus failā
    def saglabat_faila(self, fails="biblioteka.json"):
        dati = [{"nosaukums": g.nosaukums, "autors": g.autors, "gads": g.gads} for g in self.gramatas]
        with open(fails, "w", encoding="utf-8") as f:
            json.dump(dati, f, ensure_ascii=False, indent=4)
        print(f"Dati saglabāti failā '{fails}'.")

    # Nolasa datus no faila
    def ieladet_no_faila(self, fails="biblioteka.json"):
        try:
            with open(fails, "r", encoding="utf-8") as f:
                dati = json.load(f)
                self.gramatas = [Gramata(d["nosaukums"], d["autors"], d["gads"]) for d in dati]
            print(f"Dati ielādēti no '{fails}'.")
        except FileNotFoundError:
            print("Fails nav atrasts. Tiek sākta jauna bibliotēka.")


# ===============================
# Galvenā izvēlne
# ===============================
def izvelne():
    biblioteka = Biblioteka()
    biblioteka.ieladet_no_faila()

    while True:
        print("""
======== BIBLIOTĒKAS SISTĒMA ========
1. Pievienot grāmatu
2. Parādīt visas grāmatas
3. Meklēt grāmatu
4. Kārtot pēc gada
5. Dzēst grāmatu
6. Statistika
7. Saglabāt datus
8. Iziet
=====================================
""")
        izvele = input("Izvēlies darbību (1–8): ")

        if izvele == "1":
            nos = input("Ievadi grāmatas nosaukumu: ")
            aut = input("Ievadi autoru: ")
            try:
                gads = int(input("Ievadi izdošanas gadu: "))
                biblioteka.pievienot_gramatu(Gramata(nos, aut, gads))
            except ValueError:
                print("Gadam jābūt skaitlim!")

        elif izvele == "2":
            biblioteka.paradit_gramatas()

        elif izvele == "3":
            atsl = input("Ievadi meklējamo vārdu (nosaukums vai autors): ")
            biblioteka.mekle_gramatu(atsl)

        elif izvele == "4":
            biblioteka.kartot_pec_gada()

        elif izvele == "5":
            nos = input("Ievadi dzēšamās grāmatas nosaukumu: ")
            biblioteka.dzest_gramatu(nos)

        elif izvele == "6":
            biblioteka.statistika()

        elif izvele == "7":
            biblioteka.saglabat_faila()

        elif izvele == "8":
            biblioteka.saglabat_faila()
            print("Uzredzēšanos!")
            break

        else:
            print("Nepareiza izvēle. Mēģini vēlreiz.")


# ===============================
# Programmas palaišana
# ===============================
if __name__ == "__main__":
    izvelne()
